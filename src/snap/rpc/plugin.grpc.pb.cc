// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: plugin.proto

#include "plugin.pb.h"
#include "plugin.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace rpc {

static const char* Collector_method_names[] = {
  "/rpc.Collector/CollectMetrics",
  "/rpc.Collector/GetMetricTypes",
  "/rpc.Collector/Ping",
  "/rpc.Collector/Kill",
  "/rpc.Collector/GetConfigPolicy",
};

std::unique_ptr< Collector::Stub> Collector::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Collector::Stub> stub(new Collector::Stub(channel));
  return stub;
}

Collector::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CollectMetrics_(Collector_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMetricTypes_(Collector_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Ping_(Collector_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Kill_(Collector_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConfigPolicy_(Collector_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Collector::Stub::CollectMetrics(::grpc::ClientContext* context, const ::rpc::MetricsArg& request, ::rpc::MetricsReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_CollectMetrics_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpc::MetricsReply>* Collector::Stub::AsyncCollectMetricsRaw(::grpc::ClientContext* context, const ::rpc::MetricsArg& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::rpc::MetricsReply>(channel_.get(), cq, rpcmethod_CollectMetrics_, context, request);
}

::grpc::Status Collector::Stub::GetMetricTypes(::grpc::ClientContext* context, const ::rpc::GetMetricTypesArg& request, ::rpc::MetricsReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetMetricTypes_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpc::MetricsReply>* Collector::Stub::AsyncGetMetricTypesRaw(::grpc::ClientContext* context, const ::rpc::GetMetricTypesArg& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::rpc::MetricsReply>(channel_.get(), cq, rpcmethod_GetMetricTypes_, context, request);
}

::grpc::Status Collector::Stub::Ping(::grpc::ClientContext* context, const ::rpc::Empty& request, ::rpc::ErrReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Ping_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpc::ErrReply>* Collector::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::rpc::ErrReply>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::Status Collector::Stub::Kill(::grpc::ClientContext* context, const ::rpc::KillArg& request, ::rpc::ErrReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Kill_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpc::ErrReply>* Collector::Stub::AsyncKillRaw(::grpc::ClientContext* context, const ::rpc::KillArg& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::rpc::ErrReply>(channel_.get(), cq, rpcmethod_Kill_, context, request);
}

::grpc::Status Collector::Stub::GetConfigPolicy(::grpc::ClientContext* context, const ::rpc::Empty& request, ::rpc::GetConfigPolicyReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetConfigPolicy_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpc::GetConfigPolicyReply>* Collector::Stub::AsyncGetConfigPolicyRaw(::grpc::ClientContext* context, const ::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::rpc::GetConfigPolicyReply>(channel_.get(), cq, rpcmethod_GetConfigPolicy_, context, request);
}

Collector::Service::Service() {
  (void)Collector_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Collector_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Collector::Service, ::rpc::MetricsArg, ::rpc::MetricsReply>(
          std::mem_fn(&Collector::Service::CollectMetrics), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Collector_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Collector::Service, ::rpc::GetMetricTypesArg, ::rpc::MetricsReply>(
          std::mem_fn(&Collector::Service::GetMetricTypes), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Collector_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Collector::Service, ::rpc::Empty, ::rpc::ErrReply>(
          std::mem_fn(&Collector::Service::Ping), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Collector_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Collector::Service, ::rpc::KillArg, ::rpc::ErrReply>(
          std::mem_fn(&Collector::Service::Kill), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Collector_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Collector::Service, ::rpc::Empty, ::rpc::GetConfigPolicyReply>(
          std::mem_fn(&Collector::Service::GetConfigPolicy), this)));
}

Collector::Service::~Service() {
}

::grpc::Status Collector::Service::CollectMetrics(::grpc::ServerContext* context, const ::rpc::MetricsArg* request, ::rpc::MetricsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Collector::Service::GetMetricTypes(::grpc::ServerContext* context, const ::rpc::GetMetricTypesArg* request, ::rpc::MetricsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Collector::Service::Ping(::grpc::ServerContext* context, const ::rpc::Empty* request, ::rpc::ErrReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Collector::Service::Kill(::grpc::ServerContext* context, const ::rpc::KillArg* request, ::rpc::ErrReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Collector::Service::GetConfigPolicy(::grpc::ServerContext* context, const ::rpc::Empty* request, ::rpc::GetConfigPolicyReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Processor_method_names[] = {
  "/rpc.Processor/Process",
  "/rpc.Processor/Ping",
  "/rpc.Processor/Kill",
  "/rpc.Processor/GetConfigPolicy",
};

std::unique_ptr< Processor::Stub> Processor::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Processor::Stub> stub(new Processor::Stub(channel));
  return stub;
}

Processor::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Process_(Processor_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Ping_(Processor_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Kill_(Processor_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConfigPolicy_(Processor_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Processor::Stub::Process(::grpc::ClientContext* context, const ::rpc::PubProcArg& request, ::rpc::MetricsReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Process_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpc::MetricsReply>* Processor::Stub::AsyncProcessRaw(::grpc::ClientContext* context, const ::rpc::PubProcArg& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::rpc::MetricsReply>(channel_.get(), cq, rpcmethod_Process_, context, request);
}

::grpc::Status Processor::Stub::Ping(::grpc::ClientContext* context, const ::rpc::Empty& request, ::rpc::ErrReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Ping_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpc::ErrReply>* Processor::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::rpc::ErrReply>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::Status Processor::Stub::Kill(::grpc::ClientContext* context, const ::rpc::KillArg& request, ::rpc::ErrReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Kill_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpc::ErrReply>* Processor::Stub::AsyncKillRaw(::grpc::ClientContext* context, const ::rpc::KillArg& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::rpc::ErrReply>(channel_.get(), cq, rpcmethod_Kill_, context, request);
}

::grpc::Status Processor::Stub::GetConfigPolicy(::grpc::ClientContext* context, const ::rpc::Empty& request, ::rpc::GetConfigPolicyReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetConfigPolicy_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpc::GetConfigPolicyReply>* Processor::Stub::AsyncGetConfigPolicyRaw(::grpc::ClientContext* context, const ::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::rpc::GetConfigPolicyReply>(channel_.get(), cq, rpcmethod_GetConfigPolicy_, context, request);
}

Processor::Service::Service() {
  (void)Processor_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Processor_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Processor::Service, ::rpc::PubProcArg, ::rpc::MetricsReply>(
          std::mem_fn(&Processor::Service::Process), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Processor_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Processor::Service, ::rpc::Empty, ::rpc::ErrReply>(
          std::mem_fn(&Processor::Service::Ping), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Processor_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Processor::Service, ::rpc::KillArg, ::rpc::ErrReply>(
          std::mem_fn(&Processor::Service::Kill), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Processor_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Processor::Service, ::rpc::Empty, ::rpc::GetConfigPolicyReply>(
          std::mem_fn(&Processor::Service::GetConfigPolicy), this)));
}

Processor::Service::~Service() {
}

::grpc::Status Processor::Service::Process(::grpc::ServerContext* context, const ::rpc::PubProcArg* request, ::rpc::MetricsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Processor::Service::Ping(::grpc::ServerContext* context, const ::rpc::Empty* request, ::rpc::ErrReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Processor::Service::Kill(::grpc::ServerContext* context, const ::rpc::KillArg* request, ::rpc::ErrReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Processor::Service::GetConfigPolicy(::grpc::ServerContext* context, const ::rpc::Empty* request, ::rpc::GetConfigPolicyReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Publisher_method_names[] = {
  "/rpc.Publisher/Publish",
  "/rpc.Publisher/Ping",
  "/rpc.Publisher/Kill",
  "/rpc.Publisher/GetConfigPolicy",
};

std::unique_ptr< Publisher::Stub> Publisher::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Publisher::Stub> stub(new Publisher::Stub(channel));
  return stub;
}

Publisher::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Publish_(Publisher_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Ping_(Publisher_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Kill_(Publisher_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConfigPolicy_(Publisher_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Publisher::Stub::Publish(::grpc::ClientContext* context, const ::rpc::PubProcArg& request, ::rpc::ErrReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Publish_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpc::ErrReply>* Publisher::Stub::AsyncPublishRaw(::grpc::ClientContext* context, const ::rpc::PubProcArg& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::rpc::ErrReply>(channel_.get(), cq, rpcmethod_Publish_, context, request);
}

::grpc::Status Publisher::Stub::Ping(::grpc::ClientContext* context, const ::rpc::Empty& request, ::rpc::ErrReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Ping_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpc::ErrReply>* Publisher::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::rpc::ErrReply>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::Status Publisher::Stub::Kill(::grpc::ClientContext* context, const ::rpc::KillArg& request, ::rpc::ErrReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Kill_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpc::ErrReply>* Publisher::Stub::AsyncKillRaw(::grpc::ClientContext* context, const ::rpc::KillArg& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::rpc::ErrReply>(channel_.get(), cq, rpcmethod_Kill_, context, request);
}

::grpc::Status Publisher::Stub::GetConfigPolicy(::grpc::ClientContext* context, const ::rpc::Empty& request, ::rpc::GetConfigPolicyReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetConfigPolicy_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpc::GetConfigPolicyReply>* Publisher::Stub::AsyncGetConfigPolicyRaw(::grpc::ClientContext* context, const ::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::rpc::GetConfigPolicyReply>(channel_.get(), cq, rpcmethod_GetConfigPolicy_, context, request);
}

Publisher::Service::Service() {
  (void)Publisher_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Publisher_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Publisher::Service, ::rpc::PubProcArg, ::rpc::ErrReply>(
          std::mem_fn(&Publisher::Service::Publish), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Publisher_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Publisher::Service, ::rpc::Empty, ::rpc::ErrReply>(
          std::mem_fn(&Publisher::Service::Ping), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Publisher_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Publisher::Service, ::rpc::KillArg, ::rpc::ErrReply>(
          std::mem_fn(&Publisher::Service::Kill), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Publisher_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Publisher::Service, ::rpc::Empty, ::rpc::GetConfigPolicyReply>(
          std::mem_fn(&Publisher::Service::GetConfigPolicy), this)));
}

Publisher::Service::~Service() {
}

::grpc::Status Publisher::Service::Publish(::grpc::ServerContext* context, const ::rpc::PubProcArg* request, ::rpc::ErrReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Publisher::Service::Ping(::grpc::ServerContext* context, const ::rpc::Empty* request, ::rpc::ErrReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Publisher::Service::Kill(::grpc::ServerContext* context, const ::rpc::KillArg* request, ::rpc::ErrReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Publisher::Service::GetConfigPolicy(::grpc::ServerContext* context, const ::rpc::Empty* request, ::rpc::GetConfigPolicyReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* StreamCollector_method_names[] = {
  "/rpc.StreamCollector/StreamMetrics",
  "/rpc.StreamCollector/GetMetricTypes",
  "/rpc.StreamCollector/Ping",
  "/rpc.StreamCollector/Kill",
  "/rpc.StreamCollector/GetConfigPolicy",
};

std::unique_ptr< StreamCollector::Stub> StreamCollector::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< StreamCollector::Stub> stub(new StreamCollector::Stub(channel));
  return stub;
}

StreamCollector::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_StreamMetrics_(StreamCollector_method_names[0], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_GetMetricTypes_(StreamCollector_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Ping_(StreamCollector_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Kill_(StreamCollector_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConfigPolicy_(StreamCollector_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReaderWriter< ::rpc::CollectArg, ::rpc::CollectReply>* StreamCollector::Stub::StreamMetricsRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::rpc::CollectArg, ::rpc::CollectReply>(channel_.get(), rpcmethod_StreamMetrics_, context);
}

::grpc::ClientAsyncReaderWriter< ::rpc::CollectArg, ::rpc::CollectReply>* StreamCollector::Stub::AsyncStreamMetricsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReaderWriter< ::rpc::CollectArg, ::rpc::CollectReply>(channel_.get(), cq, rpcmethod_StreamMetrics_, context, tag);
}

::grpc::Status StreamCollector::Stub::GetMetricTypes(::grpc::ClientContext* context, const ::rpc::GetMetricTypesArg& request, ::rpc::MetricsReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetMetricTypes_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpc::MetricsReply>* StreamCollector::Stub::AsyncGetMetricTypesRaw(::grpc::ClientContext* context, const ::rpc::GetMetricTypesArg& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::rpc::MetricsReply>(channel_.get(), cq, rpcmethod_GetMetricTypes_, context, request);
}

::grpc::Status StreamCollector::Stub::Ping(::grpc::ClientContext* context, const ::rpc::Empty& request, ::rpc::ErrReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Ping_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpc::ErrReply>* StreamCollector::Stub::AsyncPingRaw(::grpc::ClientContext* context, const ::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::rpc::ErrReply>(channel_.get(), cq, rpcmethod_Ping_, context, request);
}

::grpc::Status StreamCollector::Stub::Kill(::grpc::ClientContext* context, const ::rpc::KillArg& request, ::rpc::ErrReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Kill_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpc::ErrReply>* StreamCollector::Stub::AsyncKillRaw(::grpc::ClientContext* context, const ::rpc::KillArg& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::rpc::ErrReply>(channel_.get(), cq, rpcmethod_Kill_, context, request);
}

::grpc::Status StreamCollector::Stub::GetConfigPolicy(::grpc::ClientContext* context, const ::rpc::Empty& request, ::rpc::GetConfigPolicyReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetConfigPolicy_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::rpc::GetConfigPolicyReply>* StreamCollector::Stub::AsyncGetConfigPolicyRaw(::grpc::ClientContext* context, const ::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::rpc::GetConfigPolicyReply>(channel_.get(), cq, rpcmethod_GetConfigPolicy_, context, request);
}

StreamCollector::Service::Service() {
  (void)StreamCollector_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      StreamCollector_method_names[0],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< StreamCollector::Service, ::rpc::CollectArg, ::rpc::CollectReply>(
          std::mem_fn(&StreamCollector::Service::StreamMetrics), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      StreamCollector_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< StreamCollector::Service, ::rpc::GetMetricTypesArg, ::rpc::MetricsReply>(
          std::mem_fn(&StreamCollector::Service::GetMetricTypes), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      StreamCollector_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< StreamCollector::Service, ::rpc::Empty, ::rpc::ErrReply>(
          std::mem_fn(&StreamCollector::Service::Ping), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      StreamCollector_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< StreamCollector::Service, ::rpc::KillArg, ::rpc::ErrReply>(
          std::mem_fn(&StreamCollector::Service::Kill), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      StreamCollector_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< StreamCollector::Service, ::rpc::Empty, ::rpc::GetConfigPolicyReply>(
          std::mem_fn(&StreamCollector::Service::GetConfigPolicy), this)));
}

StreamCollector::Service::~Service() {
}

::grpc::Status StreamCollector::Service::StreamMetrics(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::rpc::CollectReply, ::rpc::CollectArg>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StreamCollector::Service::GetMetricTypes(::grpc::ServerContext* context, const ::rpc::GetMetricTypesArg* request, ::rpc::MetricsReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StreamCollector::Service::Ping(::grpc::ServerContext* context, const ::rpc::Empty* request, ::rpc::ErrReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StreamCollector::Service::Kill(::grpc::ServerContext* context, const ::rpc::KillArg* request, ::rpc::ErrReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status StreamCollector::Service::GetConfigPolicy(::grpc::ServerContext* context, const ::rpc::Empty* request, ::rpc::GetConfigPolicyReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rpc

